<%- include("../../includes/page-start.ejs", {pathToRootFolder: "../../", useHighlightJS: true}) %>
    <%- include("../../includes/header.ejs", {pathToRootFolder: "../../", activeLink: "documentation"}) %>
    <%- include("../../includes/documentation-page-start.ejs") %>
        <h1 class="u-mb-4">Styling</h1>
        <p class="u-mb-4">Code Box comes with only the core styles. It's entirely up to you how you style it. It doesn't offer any pre-built themes, giving you complete flexibility to match the look and feel of your project. In this section, youâ€™ll find out how you can do that.</p>
        <h2 id="rules-for-styling" class="u-mb-2">Rules For Styling</h2>
        <p class="u-mb-4">You have the freedom to style the code view and code box components however you like, with a few exceptions. For code boxes, do not set the height for the element that displays the message when no code view is selected, and do not set a minimum height for the code view container. For code view, do not set line height. These properties are controlled by options (or data attributes) to support <a href="../code-box/#lazy-init-option" class="link">lazy initialization</a>.</p>
        <h2 id="styling-code-view" class="u-mb-2">Styling Code View</h2>
        <h3 class="u-mb-1">Core Styles</h3>
        <p class="u-mb-2">Following code sample shows the core CSS styles for <a href="../code-view/" class="link">CodeView</a> (written in LESS preprocessor).</p>
        <%- include("./includes/code-view-core-styles.ejs") %>
        <h3 class="u-mb-1">Example of styling</h3>
        <p class="u-mb-2">The following code sample demonstrates how to style the <a href="../code-view/" class="link">CodeView</a>.</p>
        <%- include("./includes/code-view-styling-example.ejs") %>
        <h2 id="styling-tab-code-box" class="u-mb-2">Styling Tab Code Box</h2>
        <h3 class="u-mb-1">Core Styles</h3>
        <p class="u-mb-2">Following code sample shows the core CSS styles for <a href="../tab-code-box/" class="link">TabCodeBox</a> (written in LESS preprocessor).</p>
        <%- include("./includes/tab-code-box-core-styles.ejs") %>
        <h3 class="u-mb-1">Example of styling</h3>
        <p class="u-mb-2">The following code sample demonstrates how to style the <a href="../tab-code-box/" class="link">TabCodeBox</a> (CodeView is already styled).</p>
        <%- include("./includes/tab-code-box-styling-example.ejs") %>
        <h2 id="styling-project-code-box" class="u-mb-2">Styling Project Code Box</h2>
        <h3 class="u-mb-1">Core Styles</h3>
        <p class="u-mb-2">Following code sample shows the core CSS styles for <a href="../project-code-box/" class="link">ProjectCodeBox</a> (written in LESS preprocessor).</p>
        <%- include("./includes/project-code-box-core-styles.ejs") %>
        <h3 class="u-mb-1">Example of styling</h3>
        <p class="u-mb-2">The following code sample demonstrates how to style the <a href="../project-code-box/" class="link">ProjectCodeBox</a> (CodeView is already styled).</p>
        <%- include("./includes/project-code-box-styling-example.ejs") %>
        <h2 id="virtual-code-box" class="u-mb-2">Virtual Code Box</h2>
        <p class="u-mb-2"><a href="../virtual-code-box/" class="link">VirtualCodeBox</a> is a special type of code box, that is controlled only through code. Because it lacks any additional GUI, you don't have to style it if there will always be an active code view. However, if there isn't an active code view, you can style the element that is displayed when no code view is active. The following code sample shows the core CSS styles (written in LESS preprocessor).</p>
        <%- include("./includes/virtual-code-box-core-styles.ejs") %>
    <%- include("../../includes/documentation-page-end.ejs", {pathToRootFolder: "../../", activeLink: "styling"}) %>
    <%- include("../../includes/footer.ejs") %>
<%- include("../../includes/page-end.ejs") %>